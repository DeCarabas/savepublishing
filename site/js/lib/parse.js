// Generated by CoffeeScript 1.3.3
(function() {
  var BLOCKS, BLOCK_ELEMENTS, ELEMENT_NODE, PUNCTUATION, QUOTES, SHORTENABLE_WORDS, TEXTUAL_ELEMENTS, TEXT_NODE, WORD_REGEX, key,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  console.log("Evaluating: vars.coffee");

  TEXT_NODE = 3;

  ELEMENT_NODE = 1;

  BLOCKS = ['block', 'inline-block', 'table-cell', 'table-caption', 'list-item', 'none'];

  BLOCK_ELEMENTS = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'BODY'];

  TEXTUAL_ELEMENTS = ['SPAN', 'A', 'EM', 'B', 'STRONG', 'I'];

  PUNCTUATION = ['.', '?', '!'];

  QUOTES = ['"', '“', '”'];

  SHORTENABLE_WORDS = {
    'one': 1,
    'first': "1st",
    'two': 2,
    'second': "2nd",
    'three': 3,
    'third': "3rd",
    'four': 4,
    'fourth': "4th",
    'five': 5,
    'fifth': "5th",
    'six': 6,
    'sixth': "6th",
    'seven': 7,
    'seventh': "7th",
    'eight': 8,
    'eighth': "8th",
    'nine': 9,
    'ninth': "9th",
    'ten': 10,
    'tenth': "10th",
    'eleven': 11,
    'twelve': 12,
    'thirteen': 13,
    'fourteen': 14,
    'fifteen': 15,
    'sixteen': 16,
    'seventeen': 17,
    'eighteen': 18,
    'nineteen': 19,
    'twenty': 20,
    'thirty': 30,
    'forty': 40,
    'fifty': 50,
    'sixty': 60,
    'seventy': 70,
    'eighty': 80,
    'ninety': 90,
    'hundred': 100,
    'thousand': "1k",
    'million': "mm",
    'billion': "bn",
    'trillion': "trln",
    'monday': "Mon",
    'tuesday': "Tue",
    'wednesday': "Wed",
    'thursday': "Thu",
    'friday': "Fri",
    'saturday': "Sat",
    'sunday': "Sun",
    'january': "Jan",
    'february': "Feb",
    'march': "Mar",
    'april': "Apr",
    'may': "May",
    'june': "Jun",
    'july': "Jul",
    'august': "Aug",
    'september': "Sep",
    'october': "Oct",
    'november': "Nov",
    'december': "Dec",
    'every': "vry",
    'see': "C",
    'cool': "k",
    'overheard': "OH",
    'whatever': "wtv",
    'your': "Ur",
    'you': "U",
    'about': "abt",
    'because': "b/c",
    'before': "b4",
    'chk': "chk",
    'to': "2",
    'and': "&",
    'their': "thr",
    'from': "frm",
    'them': "thm",
    'be': "B",
    'large': "lrg",
    'absolute': "abs.",
    'becomes': "bcms",
    'equal': "=",
    'which': "whch",
    'for': "4",
    'are': "R",
    'great': "gr8",
    'at': "@",
    'that': "th@",
    'quarter': "1/4",
    'half': "1/2",
    'Alabama': "AL",
    'Alaska': "AK",
    'Arizona': "AZ",
    'Arkansas': "AR",
    'California': "CA",
    'Colorado': "CO",
    'Connecticut': "CT",
    'Delaware': "DE",
    'District of Columbia': "DC",
    'Florida': "FL",
    'Georgia': "GA",
    'Hawaii': "HI",
    'Idaho': "ID",
    'Illinois': "IL",
    'Indiana': "IN",
    'Iowa': "IA",
    'Kansas': "KS",
    'Kentucky': "KY",
    'Louisiana': "LA",
    'Maine': "ME",
    'Maryland': "MD",
    'Massachusetts': "MA",
    'Michigan': "MI",
    'Minnesota': "MN",
    'Mississippi': "MS",
    'Missouri': "MO",
    'Montana': "MT",
    'Nebraska': "NE",
    'Nevada': "NV",
    "New Hampshire": "NH",
    "New Jersey": "NJ",
    "New Mexico": "NM",
    "New York": "NY",
    "North Carolina": "NC",
    "North Dakota": "ND",
    'Ohio': "OH",
    'Oklahoma': "OK",
    'Oregon': "OR",
    'Pennsylvania': "PA",
    "Rhode Island": "RI",
    "South Carolina": "SC",
    "South Dakota": "SD",
    'Tennessee': "TN",
    'Texas': "TX",
    'Utah': "UT",
    'Vermont': "VT",
    'Virginia': "VA",
    'Washington': "WA",
    "West Virginia": "WV",
    'Wisconsin': "WI",
    'Wyoming': "WY",
    "American Samoa": "AS",
    'Guam': "GU",
    "Northern Mariana Islands": "MP",
    "Puerto Rico": "PR",
    "Virgin Islands": "VI"
  };

  WORD_REGEX = new RegExp("(\\b)(" + ((function() {
    var _results;
    _results = [];
    for (key in SHORTENABLE_WORDS) {
      _results.push(key);
    }
    return _results;
  })()).sort(function(a, b) {
    return b.length - a.length;
  }).join("\|") + ")(\\b)", "gi");

  console.log("Evaluating: window.coffee");

  console.log("Evaluating: document.coffee");

  HTMLDocument.prototype.loadCSS = function(url) {
    var date, link;
    link = this.createElement("link");
    link.type = "text/css";
    link.rel = "stylesheet";
    date = Date.prototype.getTime();
    link.href = "" + url + "?bust=" + date;
    if (this.createStyleSheet) {
      return this.createStyleSheet(url);
    } else {
      return this.getElementsByTagName("body")[0].appendChild(link);
    }
  };

  console.log("Evaluating: node.coffee");

  Node.prototype.isBlockLike = function() {
    return false;
  };

  Node.prototype.isText = function() {
    return this.nodeType === TEXT_NODE;
  };

  Node.prototype.isTextual = function() {
    var _ref;
    return (this.nodeType === ELEMENT_NODE) && (_ref = this.nodeName, __indexOf.call(TEXTUAL_ELEMENTS, _ref) >= 0);
  };

  Node.prototype.isTextish = function() {
    return (typeof this !== "undefined" && this !== null) && (this.isText() || this.isTextual());
  };

  Node.prototype.isElement = function() {
    var _ref;
    return (this.nodeType === ELEMENT_NODE) && (_ref = this.nodeName, __indexOf.call(TEXTUAL_ELEMENTS, _ref) < 0);
  };

  Node.prototype.isBR = function() {
    return (this.nodeType === ELEMENT_NODE) && (this.nodeName === 'BR');
  };

  Node.prototype.isUseful = function() {
    return !(this.nodeType === 8 || /^[\t\n\r ]+$/.test(this.data));
  };

  Node.prototype.empty = function() {
    if (this.isText()) {
      return this.nodeValue = "";
    } else {
      return $(this).html("");
    }
  };

  Node.prototype.isBlockLike = function() {
    var _ref, _ref1;
    return (_ref = $(this).css('display'), __indexOf.call(blocks, _ref) >= 0) || (_ref1 = this.nodeName, __indexOf.call(BLOCK_ELEMENTS, _ref1) >= 0);
  };

  Node.prototype.concatenateTextDestructively = function(array) {
    var _ref;
    if (array == null) {
      array = [];
    }
    if (this.isTextish()) {
      if (this.isUseful()) {
        array.push($(this).text());
      }
      this.empty();
      if ((_ref = this.nextSibling) != null) {
        _ref.concatenateTextDestructively(array);
      }
    }
    return String(array.join(""));
  };

  Node.prototype.getStatements = function() {
    return this.concatenateTextDestructively().getStatements();
  };

  Node.prototype.unwrap = function() {
    var node, statement, _i, _len, _ref, _ref1, _results;
    if (this.isTextish() && this.isUseful() && !((_ref = this.previousSibling) != null ? _ref.isTextish() : void 0)) {
      return $(this).replaceWith($('<span class="socialtext-set"/>').append(((function() {
        var _i, _len, _ref1, _results;
        _ref1 = this.getStatements();
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          statement = _ref1[_i];
          _results.push("<span class=\"socialtext\">" + statement + "#</span>");
        }
        return _results;
      }).call(this)).join("")));
    } else {
      _ref1 = this.childNodes;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        node = _ref1[_i];
        _results.push(node.unwrap());
      }
      return _results;
    }
  };

  console.log("Evaluating: element.coffee");

  Element.prototype.toText = function() {
    var n, text;
    text = $(this).text();
    n = this.nodeName;
    if (n === 'B' || n === 'STRONG') {
      "*" + text + "*";
    } else if (n === 'EM' || n === 'I') {
      "_" + text + "_";
    }
    return text;
  };

  console.log("Evaluating: string.coffee");

  String.prototype.entities = function() {
    var replace;
    replace = function(char) {
      switch (char) {
        case '&':
          return '&amp;';
        case '"':
          return '&quot;';
        case '>':
          return '&gt;';
        case '<':
          return '&lt;';
      }
    };
    return this.replace(/[&\"><]/, function(a) {
      return replace(a);
    });
  };

  String.prototype.clean = function() {
    return this.replace(/\s+/g, ' ').replace(/\n+/g, ' ').replace(/^\s*$/, '').entities();
  };

  String.prototype.toAbbreviation = function(left, word, right) {
    return "" + left + SHORTENABLE_WORDS[word.toLowerCase()] + right;
  };

  String.prototype.toFirstSlash = function(str) {
    return "" + (str.charAt(0)) + "/";
  };

  String.prototype.squeeze = function() {
    return this.replace(word_regex, function(a, b, c, d) {
      return this.toAbbreviation(b, c, d);
    }).replace(/(with|of)\W/g, function(m) {
      return this.toFirstSlash(m);
    }).replace(/\s+the\s+/g, " ").replace(/(without)/g, "w/out").replace(/e(r|d)(\W)/g, "$1$2").replace(RegExp(" has", "g"), "'s ").replace(/est/g, "st").replace(/\sam\b/g, "’m").replace(/\b(will|shall)/g, "’ll").replace(/\bnot/g, "n’t").replace(/e(r|n)(\b)/g, "$1$2").replace(/\sfor/g, " 4").replace(RegExp(" have", "g"), "'ve").replace(/(1[0-9]|20)/g, function(a) {
      return "&#" + (parseInt(a) + 9311) + ";";
    });
  };

  String.prototype.textToLink = function() {
    return $("<a href=\"http://twitter.com" + (encodeURI(this)) + "\">" + this + "#</a>");
  };

  String.prototype.compareLength = function(comparison) {
    return this.length < comparison;
  };

  String.prototype.getStatements = function() {
    var char, chars, closing, current, currentLast, doBreak, isCloseToCap, isContinuation, isVeryShort, lastCap, lastCapDelta, statements;
    chars = [];
    current = [];
    statements = [];
    closing = ".";
    lastCap = null;
    chars = this.split("");
    while (chars.length > 0) {
      char = chars.shift();
      current.push(char);
      currentLast = current.length - 1;
      if (/[A-Z]/.test(char)) {
        lastCap = currentLast;
      }
      if ((__indexOf.call(QUOTES, char) >= 0 && __indexOf.call(QUOTES, closing) >= 0) || (__indexOf.call(PUNCTUATION, char) >= 0 && __indexOf.call(PUNCTUATION, closing) >= 0) || (chars.length === 0)) {
        isContinuation = /\s/.test(chars != null ? chars[0] : void 0) && /[a-z]/.test(chars != null ? chars[1] : void 0);
        lastCapDelta = lastCap ? currentLast - lastCap : null;
        isCloseToCap = lastCapDelta < 5;
        isVeryShort = currentLast < 15;
        doBreak = !(isContinuation || isVeryShort || isCloseToCap);
        if (chars.length === 0 || doBreak) {
          if (current.length > 0) {
            statements.push(current.join(""));
            current = [];
            closing = ".";
            lastCap = null;
          }
        } else {
          closing = ".";
        }
      } else if ((__indexOf.call(QUOTES, char) >= 0)) {
        closing = char;
      }
    }
    return statements;
  };

  console.log("Evaluating: run.coffee");

  $(document).ready(function() {
    window.onload = window.onunload = function() {};
    $('script').remove();
    document.loadCSS('https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.23/themes/ui-lightness/jquery-ui.css');
    document.body.unwrap();
    $(".socialtext").css({
      cursor: 'pointer'
    });
    return $(".socialtext").click(function() {
      return console.log('clicked', this);
    });
  });

}).call(this);
