// Generated by CoffeeScript 1.3.3
(function() {
  var BLOCKS, BLOCK_ELEMENTS, ELEMENT_NODE, TEXTUAL_ELEMENTS, TEXT_NODE, unwrap,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  TEXT_NODE = 3;

  ELEMENT_NODE = 1;

  BLOCKS = ['block', 'inline-block', 'table-cell', 'table-caption', 'list-item', 'none'];

  BLOCK_ELEMENTS = ['H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'BODY'];

  TEXTUAL_ELEMENTS = ['SPAN', 'A', 'EM', 'B', 'STRONG', 'I'];

  Node.prototype.isBlockLike = function() {
    return false;
  };

  Node.prototype.isText = function() {
    return this.nodeType === TEXT_NODE;
  };

  Node.prototype.isTextual = function() {
    var _ref;
    return (this.nodeType === ELEMENT_NODE) && (_ref = this.nodeName, __indexOf.call(TEXTUAL_ELEMENTS, _ref) >= 0);
  };

  Node.prototype.isTextish = function() {
    return (typeof this !== "undefined" && this !== null) && (this.isText() || this.isTextual());
  };

  Node.prototype.isElement = function() {
    var _ref;
    return (this.nodeType === ELEMENT_NODE) && (_ref = this.nodeName, __indexOf.call(TEXTUAL_ELEMENTS, _ref) < 0);
  };

  Node.prototype.isUseful = function() {
    return !(this.nodeType === 8 || /^[\t\n\r ]+$/.test(this.data));
  };

  Node.prototype.empty = function() {
    if (this.isText()) {
      return this.nodeValue = "";
    } else {
      return $(this).html("");
    }
  };

  Node.prototype.isBlockLike = function() {
    var _ref, _ref1;
    return (_ref = $(this).css('display'), __indexOf.call(blocks, _ref) >= 0) || (_ref1 = this.nodeName, __indexOf.call(BLOCK_ELEMENTS, _ref1) >= 0);
  };

  Element.prototype.toText = function() {
    var n, text;
    text = $(this).text();
    n = this.nodeName;
    if (n === 'B' || n === 'STRONG') {
      "*" + text + "*";
    } else if (n === 'EM' || n === 'I') {
      "_" + text + "_";
    }
    return text;
  };

  String.prototype.entities = function() {
    var replace;
    replace = function(char) {
      switch (char) {
        case '&':
          return '&amp;';
        case '"':
          return '&quot;';
        case '>':
          return '&gt;';
        case '<':
          return '&lt;';
      }
    };
    return this.replace(/[&\"><]/, function(a) {
      return replace(a);
    });
  };

  String.prototype.clean = function() {
    return this.replace(/\s+/g, ' ').replace(/\n+/g, ' ').replace(/^\s*$/, '').entities();
  };

  unwrap = function(node) {
    var text, textNodes, _i, _len, _ref, _ref1, _results;
    textNodes = function(node, array) {
      if (node != null) {
        if (node.isTextish()) {
          if (node.isUseful()) {
            array.push($(node).text());
          }
          node.empty();
          textNodes(node.nextSibling, array);
        }
      }
      return array.join("");
    };
    if (node.isElement()) {
      _ref = node.childNodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        _results.push(unwrap(node));
      }
      return _results;
    } else if (node.isTextish()) {
      if (!((_ref1 = node.previousSibling) != null ? _ref1.isTextish() : void 0)) {
        text = textNodes(node, []);
        return node.nodeValue = text;
      }
    }
  };

  $(function() {
    return unwrap(document.body);
  });

}).call(this);
